#################################################################################
#                         OneBranch Pipelines - Official                        #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none 

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false
  
- name: 'ortversion'
  displayName: 'ONNX Runtime Version'
  type: string
  default: '1.13.1'

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] 
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none
  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/vse2019:latest'
  LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004:latest'
  DEBIAN_FRONTEND: noninteractive

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main
    - repository: vcpkg
      type: github
      name: microsoft/vcpkg
      ref: refs/heads/master
      endpoint: microsoft

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates 
  parameters:
    cloudvault:
      enabled: false
    globalSdl:
      tsa:
        enabled: true
      prefast:
        enabled: true
      binskim:
        break: true # always break the build on binskim issues in addition to TSA upload
      codeql:
        python:
          enabled: true
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
        exclusionsFile: '$(REPOROOT)\ci_build\policheck_exclusions.xml'

    stages:
    - stage: linux_stage
      jobs:
      - job: linux_job
        pool:
          type: linux

        variables:
          ob_outputDirectory: '$(Build.SourcesDirectory)/out' 

        steps: 
          - task: onebranch.pipeline.version@1
            displayName: 'Setup BuildNumber'
            inputs:
              system: 'RevisionCounter'
              major: '1'
              minor: '0'
              exclude_commit: true

          - task: Bash@3
            displayName: 'Download ONNX Runtime Binaries'            
            inputs:
              targetType: filePath
              filePath: ci_build/download_ort_release_and_install_deps.sh
              arguments: '-i ${{ parameters.ortversion }}'
              workingDirectory: '$(Build.BinariesDirectory)'

          - script: |
                set -e -x
                CFLAGS="-O2 -Wall -Wextra -Werror" CXXFLAGS="-O2 -Wall -Wextra -Werror" cmake $(Build.SourcesDirectory)/c_cxx -DCMAKE_BUILD_TYPE=Release -DONNXRUNTIME_ROOTDIR=$(Build.BinariesDirectory)/onnxruntimebin
                make -j$(nproc)
            displayName: build
            workingDirectory: '$(Build.BinariesDirectory)'

    - stage: Windows_Build
      jobs:
      - job: main
        pool:
          type: windows  
        
        variables:
          ob_outputDirectory: '$(REPOROOT)\out'
          ob_sdl_binskim_break: true 
          ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
            ob_symbolsPublishing_enabled: true
        steps:
        - checkout: vcpkg
        - script: |
            @echo off
            set vswherepath="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
            for /f "usebackq delims=" %%i in (`%vswherepath% -latest -property installationPath`) do (
              set vslatest="%%i"
              if exist "%%i\Common7\Tools\vsdevcmd.bat" (
                set vsdevcmd="%%i\Common7\Tools\vsdevcmd.bat"
              )
            )
            
            @echo vslatest %vslatest%
            @echo vsdevcmd %vsdevcmd%
            
            @echo ##vso[task.setvariable variable=vslatest]%vslatest%
            @echo ##vso[task.setvariable variable=vsdevcmd]%vsdevcmd%
          displayName: 'locate vsdevcmd via vswhere'

        - task: PowerShell@2
          displayName: 'Download ONNX Runtime'
          inputs:
            targetType: filePath
            filePath: ci_build/download_ort_release.ps1
            arguments: '${{ parameters.ortversion }}'
            workingDirectory: '$(Build.BinariesDirectory)'

        #TODO: use the vsdevcmd variable
        - script: |
            call $(vsdevcmd)
            call .\vcpkg\bootstrap-vcpkg.bat
            cd $(Build.BinariesDirectory)
            mkdir build
            cd build
            cmake $(REPOROOT)\c_cxx -A x64 -T host=x64 -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static "-DONNXRUNTIME_ROOTDIR=$(Build.BinariesDirectory)/onnxruntimebin"
              
        - task: VSBuild@1
          displayName: 'Build'
          inputs:
            solution: '$(Build.BinariesDirectory)\build\onnxruntime_samples.sln'
            platform: x64
            configuration: Release
            msbuildArchitecture: x64
            maximumCpuCount: true
            logProjectEvents: true
            workingFolder: '$(Build.BinariesDirectory)\build'
            createLogFile: true

        #Delete onnxruntime.dll which isn't compliant yet.
        - task: DeleteFiles@1
          displayName: 'Delete DLLs from onnxruntimebin'
          inputs:
            SourceFolder: $(Build.BinariesDirectory)\onnxruntimebin
            Contents: '*.dll'