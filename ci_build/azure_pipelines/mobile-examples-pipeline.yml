jobs:

# mobile/examples/basic_usage/ios
- job: BasicUsageIos
  pool:
    vmImage: "macOS-11"

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ../model/requirements.txt
      ../model/gen_model.sh ./OrtBasicUsage/model
    workingDirectory: mobile/examples/basic_usage/ios
    displayName: "Generate model"

  - script: pod install
    workingDirectory: 'mobile/examples/basic_usage/ios'
    displayName: "Install CocoaPods pods"

  - template: templates/xcode-build-and-test-step.yml
    parameters:
      xcWorkspacePath: 'mobile/examples/basic_usage/ios/OrtBasicUsage.xcworkspace'
      scheme: 'OrtBasicUsage'

# mobile/examples/speech_recognition/ios
- job: SpeechRecognitionIos
  pool:
    vmImage: "macOS-11"

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ../model/requirements.txt
      ../model/gen_model.sh ./SpeechRecognition/model
    workingDirectory: mobile/examples/speech_recognition/ios
    displayName: "Generate model"

  - script: pod install
    workingDirectory: 'mobile/examples/speech_recognition/ios'
    displayName: "Install CocoaPods pods"

  - template: templates/xcode-build-and-test-step.yml
    parameters:
      xcWorkspacePath: 'mobile/examples/speech_recognition/ios/SpeechRecognition.xcworkspace'
      scheme: 'SpeechRecognition'

# mobile/examples/object_detection/ios
- job: ObjectDetectionIos
  pool:
    vmImage: "macOS-11"

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ./prepare_model.requirements.txt
      ./prepare_model.sh
    workingDirectory: mobile/examples/object_detection/ios/ORTObjectDetection
    displayName: "Generate model"

  - script: pod install
    workingDirectory: 'mobile/examples/object_detection/ios'
    displayName: "Install CocoaPods pods"

  - template: templates/xcode-build-and-test-step.yml
    parameters:
      xcWorkspacePath: 'mobile/examples/object_detection/ios/ORTObjectDetection.xcworkspace'
      scheme: 'ORTObjectDetection'

# mobile/examples/image_classification/android
- job: ImageClassificationAndroid
  pool:
    vmImage: "macOS-11"

  steps:
  - template: templates/use-python-step.yml

  - bash: ./download_model_files.sh
    workingDirectory: mobile/examples/image_classification/android
    displayName: "Download model files"

  - script: |
      python3 ./ci_build/python/run_android_emulator.py \
        --android-sdk-root ${ANDROID_SDK_ROOT} \
        --create-avd --system-image "system-images;android-30;google_apis;x86_64" \
        --start --emulator-extra-args="-partition-size 4096" \
        --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
    displayName: "Start Android emulator"

  - bash: ./gradlew testDebugUnitTest connectedDebugAndroidTest
    workingDirectory: mobile/examples/image_classification/android
    displayName: "Build and run tests"

  - script: |
      python3 ./ci_build/python/run_android_emulator.py \
        --android-sdk-root ${ANDROID_SDK_ROOT} \
        --stop \
        --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
    displayName: "Stop Android emulator"
    condition: always()
