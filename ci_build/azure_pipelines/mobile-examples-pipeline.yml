parameters:
- name: OrtPodVersion
  displayName: "ONNX Runtime Pod version to use. 'default' means unspecified."
  type: string
  default: "default"

jobs:

- job: ProcessParameters
  pool:
    vmImage: "ubuntu-20.04"

  steps:
  - checkout: none

  - template: templates/use-python-step.yml

  - task: PythonScript@0
    inputs:
      scriptSource: "inline"
      script: |
        import sys
        import re

        version_str = sys.argv[1]
        if re.fullmatch(r"[\w\.\-\+]+", version_str) is None:
            raise ValueError(f"Invalid version: '{version_str}'")

        if version_str == "default":
            pod_version_specifier = ""
        else:
            pod_version_specifier = f", '{version_str}'"

        print(f"##vso[task.setvariable variable=OrtPodVersionSpecifier;isoutput=true]{pod_version_specifier}")
      arguments: "${{ parameters.OrtPodVersion }}"
    name: SetVariables
    displayName: "Set variables"

# mobile/examples/basic_usage/ios
- job: BasicUsageIos
  pool:
    vmImage: "macOS-11"

  dependsOn: ProcessParameters

  variables:
    OrtPodVersionSpecifier: $[ dependencies.ProcessParameters.outputs['SetVariables.OrtPodVersionSpecifier'] ]

  strategy:
    matrix:
      full:
        OrtPodNamePrefix: onnxruntime
        XcodeArgs: 'GCC_PREPROCESSOR_DEFINITIONS="$GCC_PREPROCESSOR_DEFINITIONS ORT_BASIC_USAGE_USE_ONNX_FORMAT_MODEL"'
      mobile:
        OrtPodNamePrefix: onnxruntime-mobile
        XcodeArgs: ''

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ../model/requirements.txt
      ../model/gen_model.sh ./OrtBasicUsage/model
    workingDirectory: mobile/examples/basic_usage/ios
    displayName: "Generate model"

  - bash: |
      set -e
      PODFILE=mobile/examples/basic_usage/ios/Podfile
      sed -i "" -e "s/pod 'onnxruntime-objc'/pod '$(OrtPodNamePrefix)-objc'$(OrtPodVersionSpecifier)/" ${PODFILE}
      cat ${PODFILE}
    displayName: "Update Podfile"

  - script: pod install
    workingDirectory: 'mobile/examples/basic_usage/ios'
    displayName: "Install CocoaPods pods"

  - template: templates/xcode-build-and-test-step.yml
    parameters:
      xcWorkspacePath: 'mobile/examples/basic_usage/ios/OrtBasicUsage.xcworkspace'
      scheme: 'OrtBasicUsage'
      args: $(XcodeArgs)

# mobile/examples/speech_recognition/ios
- job: SpeechRecognitionIos
  pool:
    vmImage: "macOS-11"

  dependsOn: ProcessParameters

  variables:
    OrtPodVersionSpecifier: $[ dependencies.ProcessParameters.outputs['SetVariables.OrtPodVersionSpecifier'] ]

  strategy:
    matrix:
      full:
        OrtPodNamePrefix: onnxruntime
      mobile:
        OrtPodNamePrefix: onnxruntime-mobile

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ../model/requirements.txt
      ../model/gen_model.sh ./SpeechRecognition/model
    workingDirectory: mobile/examples/speech_recognition/ios
    displayName: "Generate model"

  - bash: |
      set -e
      PODFILE=mobile/examples/speech_recognition/ios/Podfile
      sed -i "" -e "s/pod 'onnxruntime-objc'/pod '$(OrtPodNamePrefix)-objc'$(OrtPodVersionSpecifier)/" ${PODFILE}
      cat ${PODFILE}
    displayName: "Update Podfile"

  - script: pod install
    workingDirectory: 'mobile/examples/speech_recognition/ios'
    displayName: "Install CocoaPods pods"

  - template: templates/xcode-build-and-test-step.yml
    parameters:
      xcWorkspacePath: 'mobile/examples/speech_recognition/ios/SpeechRecognition.xcworkspace'
      scheme: 'SpeechRecognition'

# mobile/examples/object_detection/ios
- job: ObjectDetectionIos
  pool:
    vmImage: "macOS-11"

  dependsOn: ProcessParameters

  variables:
    OrtPodVersionSpecifier: $[ dependencies.ProcessParameters.outputs['SetVariables.OrtPodVersionSpecifier'] ]

  strategy:
    matrix:
      full:
        OrtPodNamePrefix: onnxruntime
      mobile:
        OrtPodNamePrefix: onnxruntime-mobile

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ./prepare_model.requirements.txt
      ./prepare_model.sh
    workingDirectory: mobile/examples/object_detection/ios/ORTObjectDetection
    displayName: "Generate model"

  - bash: |
      set -e
      PODFILE=mobile/examples/object_detection/ios/Podfile
      sed -i "" -e "s/pod 'onnxruntime-objc'/pod '$(OrtPodNamePrefix)-objc'$(OrtPodVersionSpecifier)/" ${PODFILE}
      cat ${PODFILE}
    displayName: "Update Podfile"

  - script: pod install
    workingDirectory: 'mobile/examples/object_detection/ios'
    displayName: "Install CocoaPods pods"

  - template: templates/xcode-build-and-test-step.yml
    parameters:
      xcWorkspacePath: 'mobile/examples/object_detection/ios/ORTObjectDetection.xcworkspace'
      scheme: 'ORTObjectDetection'

# mobile/examples/image_classification/android
- job: ImageClassificationAndroid
  pool:
    vmImage: "macOS-11"

  strategy:
    matrix:
      full:
        OrtPackageName: onnxruntime-android
        ModelFormat: onnx
      mobile:
        OrtPackageName: onnxruntime-mobile
        ModelFormat: ort

  steps:
  - template: templates/use-python-step.yml

  - bash: |
      set -e
      pip install -r ./prepare_models.requirements.txt
      ./prepare_models.py --output_dir ./app/src/main/res/raw --format $(ModelFormat)
    workingDirectory: mobile/examples/image_classification/android
    displayName: "Generate models"

  - bash: |
      set -e
      GRADLE_FILE=mobile/examples/image_classification/android/app/build.gradle
      sed -i "" \
        -e "s/implementation 'com.microsoft.onnxruntime:onnxruntime-android:latest.release'/implementation 'com.microsoft.onnxruntime:$(OrtPackageName):latest.release'/" \
        ${GRADLE_FILE}
      cat ${GRADLE_FILE}
    displayName: "Update build.gradle"

  - script: |
      python3 ./ci_build/python/run_android_emulator.py \
        --android-sdk-root ${ANDROID_SDK_ROOT} \
        --create-avd --system-image "system-images;android-30;google_apis;x86_64" \
        --start --emulator-extra-args="-partition-size 4096" \
        --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
    displayName: "Start Android emulator"

  - bash: ./gradlew testDebugUnitTest connectedDebugAndroidTest
    workingDirectory: mobile/examples/image_classification/android
    displayName: "Build and run tests"

  - script: |
      python3 ./ci_build/python/run_android_emulator.py \
        --android-sdk-root ${ANDROID_SDK_ROOT} \
        --stop \
        --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
    displayName: "Stop Android emulator"
    condition: always()
